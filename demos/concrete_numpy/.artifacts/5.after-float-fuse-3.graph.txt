 %0 = [[ 0  1] [-2 -1] [ 3 -4]]         # ClearTensor<int3, shape=(3, 2)>
 %1 = -1                                # ClearScalar<int2>
 %2 = [[1] [1] [1]]                     # ClearTensor<uint1, shape=(3, 1)>
 %3 = -2                                # ClearScalar<int2>
 %4 = [[ 1 -2  3 ...  3 -1  1]]         # ClearTensor<int3, shape=(3, 3)>
 %5 = 0                                 # ClearScalar<uint1>
 %6 = [[1] [1] [1]]                     # ClearTensor<uint1, shape=(3, 1)>
 %7 = 0                                 # ClearScalar<uint1>
 %8 = 0                                 # ClearScalar<uint1>
 %9 = 7                                 # ClearScalar<uint3>
%10 = [ 1.929468 ... .32157814]         # ClearTensor<float64, shape=(3,)>
%11 = 0.10599581914480488               # ClearScalar<float64>
%12 = [[0 0 0]]                         # ClearTensor<uint1, shape=(1, 3)>
%13 = 0                                 # ClearScalar<uint1>
%14 = q_x                               # EncryptedTensor<uint3, shape=(1, 4)>
%15 = [[-4  3 -3 ...  2 -4  1]]         # ClearTensor<int3, shape=(4, 3)>
%16 = -3                                # ClearScalar<int3>
%17 = [[1] [1] [1] [1]]                 # ClearTensor<uint1, shape=(4, 1)>
%18 = matmul(%14, %15)                  # EncryptedTensor<int64, shape=(1, 3)>
%19 = matmul(%14, %17)                  # EncryptedTensor<uint32, shape=(1, 1)>
%20 = mul(%16, %19)                     # EncryptedTensor<int33, shape=(1, 1)>
%21 = negative(%20)                     # EncryptedTensor<int64, shape=(1, 1)>
%22 = add(%18, %21)                     # EncryptedTensor<int64, shape=(1, 3)>
%23 = astype(%22, dtype=float32)        # EncryptedTensor<float32, shape=(1, 3)>
%24 = add(%23, %13)                     # EncryptedTensor<float32, shape=(1, 3)>
%25 = add(%24, %12)                     # EncryptedTensor<float32, shape=(1, 3)>
%26 = mul(%11, %25)                     # EncryptedTensor<float64, shape=(1, 3)>
%27 = add(%10, %26)                     # EncryptedTensor<float64, shape=(1, 3)>
%28 = rint(%27)                         # EncryptedTensor<float64, shape=(1, 3)>
%29 = clip(%28, %8, %9)                 # EncryptedTensor<float64, shape=(1, 3)>
%30 = astype(%29, dtype=int64)          # EncryptedTensor<int64, shape=(1, 3)>
%31 = add(%30, %7)                      # EncryptedTensor<int64, shape=(1, 3)>
%32 = subgraph(%31)                     # EncryptedTensor<int64, shape=(1, 3)>
%33 = matmul(%32, %4)                   # EncryptedTensor<int64, shape=(1, 3)>
%34 = matmul(%32, %6)                   # EncryptedTensor<int64, shape=(1, 1)>
%35 = mul(%5, %34)                      # EncryptedTensor<int64, shape=(1, 1)>
%36 = negative(%35)                     # EncryptedTensor<int64, shape=(1, 1)>
%37 = add(%33, %36)                     # EncryptedTensor<int64, shape=(1, 3)>
%38 = subgraph(%37)                     # EncryptedTensor<int64, shape=(1, 3)>
%39 = add(%38, %3)                      # EncryptedTensor<int64, shape=(1, 3)>
%40 = subgraph(%39)                     # EncryptedTensor<int64, shape=(1, 3)>
%41 = matmul(%40, %0)                   # EncryptedTensor<int64, shape=(1, 2)>
%42 = matmul(%40, %2)                   # EncryptedTensor<int64, shape=(1, 1)>
%43 = mul(%1, %42)                      # EncryptedTensor<int64, shape=(1, 1)>
%44 = negative(%43)                     # EncryptedTensor<int64, shape=(1, 1)>
%45 = add(%41, %44)                     # EncryptedTensor<int64, shape=(1, 2)>
%46 = subgraph(%45)                     # EncryptedTensor<int64, shape=(1, 2)>
return %46

Subgraphs:

    %32 = subgraph(%31):

         %0 = 0                               # ClearScalar<uint1>
         %1 = 0.21301029409681047             # ClearScalar<float64>
         %2 = 7                               # ClearScalar<uint3>
         %3 = 6                               # ClearScalar<uint3>
         %4 = 0                               # ClearScalar<uint1>
         %5 = 0                               # ClearScalar<uint1>
         %6 = 0.21301029409681047             # ClearScalar<float64>
         %7 = float_subgraph_input            # EncryptedTensor<int64, shape=(1, 3)>
         %8 = mul(%7, %1)                     # EncryptedTensor<float64, shape=(1, 3)>
         %9 = maximum(%5, %8)                 # EncryptedTensor<float64, shape=(1, 3)>
        %10 = minimum(%9, %3)                 # EncryptedTensor<float64, shape=(1, 3)>
        %11 = truediv(%10, %6)                # EncryptedTensor<float64, shape=(1, 3)>
        %12 = add(%11, %4)                    # EncryptedTensor<float64, shape=(1, 3)>
        %13 = rint(%12)                       # EncryptedTensor<float64, shape=(1, 3)>
        %14 = clip(%13, %0, %2)               # EncryptedTensor<float64, shape=(1, 3)>
        %15 = astype(%14, dtype=int64)        # EncryptedTensor<int64, shape=(1, 3)>
        return %15

    %38 = subgraph(%37):

         %0 = [2.3489919 ... .09395143]        # ClearTensor<float64, shape=(3,)>
         %1 = 0.10764519433874437              # ClearScalar<float64>
         %2 = 7                                # ClearScalar<uint3>
         %3 = 0                                # ClearScalar<uint1>
         %4 = [[0 0 0]]                        # ClearTensor<uint1, shape=(1, 3)>
         %5 = 0                                # ClearScalar<uint1>
         %6 = float_subgraph_input             # EncryptedTensor<int64, shape=(1, 3)>
         %7 = astype(%6, dtype=float32)        # EncryptedTensor<float32, shape=(1, 3)>
         %8 = add(%7, %5)                      # EncryptedTensor<float32, shape=(1, 3)>
         %9 = add(%8, %4)                      # EncryptedTensor<float32, shape=(1, 3)>
        %10 = mul(%1, %9)                      # EncryptedTensor<float64, shape=(1, 3)>
        %11 = add(%0, %10)                     # EncryptedTensor<float64, shape=(1, 3)>
        %12 = rint(%11)                        # EncryptedTensor<float64, shape=(1, 3)>
        %13 = clip(%12, %3, %2)                # EncryptedTensor<float64, shape=(1, 3)>
        %14 = astype(%13, dtype=int64)         # EncryptedTensor<int64, shape=(1, 3)>
        return %14

    %40 = subgraph(%39):

         %0 = 0                               # ClearScalar<uint1>
         %1 = 7                               # ClearScalar<uint3>
         %2 = 0.43717812553146684             # ClearScalar<float64>
         %3 = 0                               # ClearScalar<uint1>
         %4 = 0.3122700896653335              # ClearScalar<float64>
         %5 = 6                               # ClearScalar<uint3>
         %6 = 0                               # ClearScalar<uint1>
         %7 = float_subgraph_input            # EncryptedTensor<int64, shape=(1, 3)>
         %8 = mul(%7, %2)                     # EncryptedTensor<float64, shape=(1, 3)>
         %9 = maximum(%0, %8)                 # EncryptedTensor<float64, shape=(1, 3)>
        %10 = minimum(%9, %5)                 # EncryptedTensor<float64, shape=(1, 3)>
        %11 = truediv(%10, %4)                # EncryptedTensor<float64, shape=(1, 3)>
        %12 = add(%11, %6)                    # EncryptedTensor<float64, shape=(1, 3)>
        %13 = rint(%12)                       # EncryptedTensor<float64, shape=(1, 3)>
        %14 = clip(%13, %3, %1)               # EncryptedTensor<float64, shape=(1, 3)>
        %15 = astype(%14, dtype=int64)        # EncryptedTensor<int64, shape=(1, 3)>
        return %15

    %46 = subgraph(%45):

         %0 = 2.0072866201924806               # ClearScalar<float64>
         %1 = [ 2.12050759 50.90961931]        # ClearTensor<float64, shape=(2,)>
         %2 = 63                               # ClearScalar<uint6>
         %3 = 0                                # ClearScalar<uint1>
         %4 = [[0 0]]                          # ClearTensor<uint1, shape=(1, 2)>
         %5 = 0                                # ClearScalar<uint1>
         %6 = float_subgraph_input             # EncryptedTensor<int64, shape=(1, 2)>
         %7 = astype(%6, dtype=float32)        # EncryptedTensor<float32, shape=(1, 2)>
         %8 = add(%7, %5)                      # EncryptedTensor<float32, shape=(1, 2)>
         %9 = add(%8, %4)                      # EncryptedTensor<float32, shape=(1, 2)>
        %10 = mul(%0, %9)                      # EncryptedTensor<float64, shape=(1, 2)>
        %11 = add(%1, %10)                     # EncryptedTensor<float64, shape=(1, 2)>
        %12 = rint(%11)                        # EncryptedTensor<float64, shape=(1, 2)>
        %13 = clip(%12, %3, %2)                # EncryptedTensor<float64, shape=(1, 2)>
        %14 = astype(%13, dtype=int64)         # EncryptedTensor<int64, shape=(1, 2)>
        return %14
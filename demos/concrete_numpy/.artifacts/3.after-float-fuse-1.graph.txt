 %0 = [[ 0  1] [-2 -1] [ 3 -4]]         # ClearTensor<int3, shape=(3, 2)>
 %1 = -1                                # ClearScalar<int2>
 %2 = [[1] [1] [1]]                     # ClearTensor<uint1, shape=(3, 1)>
 %3 = -2                                # ClearScalar<int2>
 %4 = 0                                 # ClearScalar<uint1>
 %5 = 7                                 # ClearScalar<uint3>
 %6 = [2.3489919 ... .09395143]         # ClearTensor<float64, shape=(3,)>
 %7 = 0.10764519433874437               # ClearScalar<float64>
 %8 = [[0 0 0]]                         # ClearTensor<uint1, shape=(1, 3)>
 %9 = 0                                 # ClearScalar<uint1>
%10 = [[ 1 -2  3 ...  3 -1  1]]         # ClearTensor<int3, shape=(3, 3)>
%11 = 0                                 # ClearScalar<uint1>
%12 = 0                                 # ClearScalar<uint1>
%13 = 7                                 # ClearScalar<uint3>
%14 = [[1] [1] [1]]                     # ClearTensor<uint1, shape=(3, 1)>
%15 = 0                                 # ClearScalar<uint1>
%16 = 0.21301029409681047               # ClearScalar<float64>
%17 = 6                                 # ClearScalar<uint3>
%18 = 0                                 # ClearScalar<uint1>
%19 = 0.21301029409681047               # ClearScalar<float64>
%20 = 0                                 # ClearScalar<uint1>
%21 = 0                                 # ClearScalar<uint1>
%22 = 7                                 # ClearScalar<uint3>
%23 = [ 1.929468 ... .32157814]         # ClearTensor<float64, shape=(3,)>
%24 = 0.10599581914480488               # ClearScalar<float64>
%25 = [[0 0 0]]                         # ClearTensor<uint1, shape=(1, 3)>
%26 = 0                                 # ClearScalar<uint1>
%27 = q_x                               # EncryptedTensor<uint3, shape=(1, 4)>
%28 = [[-4  3 -3 ...  2 -4  1]]         # ClearTensor<int3, shape=(4, 3)>
%29 = -3                                # ClearScalar<int3>
%30 = [[1] [1] [1] [1]]                 # ClearTensor<uint1, shape=(4, 1)>
%31 = matmul(%27, %28)                  # EncryptedTensor<int64, shape=(1, 3)>
%32 = matmul(%27, %30)                  # EncryptedTensor<uint32, shape=(1, 1)>
%33 = mul(%29, %32)                     # EncryptedTensor<int33, shape=(1, 1)>
%34 = negative(%33)                     # EncryptedTensor<int64, shape=(1, 1)>
%35 = add(%31, %34)                     # EncryptedTensor<int64, shape=(1, 3)>
%36 = astype(%35, dtype=float32)        # EncryptedTensor<float32, shape=(1, 3)>
%37 = add(%36, %26)                     # EncryptedTensor<float32, shape=(1, 3)>
%38 = add(%37, %25)                     # EncryptedTensor<float32, shape=(1, 3)>
%39 = mul(%24, %38)                     # EncryptedTensor<float64, shape=(1, 3)>
%40 = add(%23, %39)                     # EncryptedTensor<float64, shape=(1, 3)>
%41 = rint(%40)                         # EncryptedTensor<float64, shape=(1, 3)>
%42 = clip(%41, %21, %22)               # EncryptedTensor<float64, shape=(1, 3)>
%43 = astype(%42, dtype=int64)          # EncryptedTensor<int64, shape=(1, 3)>
%44 = add(%43, %20)                     # EncryptedTensor<int64, shape=(1, 3)>
%45 = mul(%44, %19)                     # EncryptedTensor<float64, shape=(1, 3)>
%46 = maximum(%18, %45)                 # EncryptedTensor<float64, shape=(1, 3)>
%47 = minimum(%46, %17)                 # EncryptedTensor<float64, shape=(1, 3)>
%48 = truediv(%47, %16)                 # EncryptedTensor<float64, shape=(1, 3)>
%49 = add(%48, %15)                     # EncryptedTensor<float64, shape=(1, 3)>
%50 = rint(%49)                         # EncryptedTensor<float64, shape=(1, 3)>
%51 = clip(%50, %12, %13)               # EncryptedTensor<float64, shape=(1, 3)>
%52 = astype(%51, dtype=int64)          # EncryptedTensor<int64, shape=(1, 3)>
%53 = matmul(%52, %10)                  # EncryptedTensor<int64, shape=(1, 3)>
%54 = matmul(%52, %14)                  # EncryptedTensor<int64, shape=(1, 1)>
%55 = mul(%11, %54)                     # EncryptedTensor<int64, shape=(1, 1)>
%56 = negative(%55)                     # EncryptedTensor<int64, shape=(1, 1)>
%57 = add(%53, %56)                     # EncryptedTensor<int64, shape=(1, 3)>
%58 = astype(%57, dtype=float32)        # EncryptedTensor<float32, shape=(1, 3)>
%59 = add(%58, %9)                      # EncryptedTensor<float32, shape=(1, 3)>
%60 = add(%59, %8)                      # EncryptedTensor<float32, shape=(1, 3)>
%61 = mul(%7, %60)                      # EncryptedTensor<float64, shape=(1, 3)>
%62 = add(%6, %61)                      # EncryptedTensor<float64, shape=(1, 3)>
%63 = rint(%62)                         # EncryptedTensor<float64, shape=(1, 3)>
%64 = clip(%63, %4, %5)                 # EncryptedTensor<float64, shape=(1, 3)>
%65 = astype(%64, dtype=int64)          # EncryptedTensor<int64, shape=(1, 3)>
%66 = add(%65, %3)                      # EncryptedTensor<int64, shape=(1, 3)>
%67 = subgraph(%66)                     # EncryptedTensor<int64, shape=(1, 3)>
%68 = matmul(%67, %0)                   # EncryptedTensor<int64, shape=(1, 2)>
%69 = matmul(%67, %2)                   # EncryptedTensor<int64, shape=(1, 1)>
%70 = mul(%1, %69)                      # EncryptedTensor<int64, shape=(1, 1)>
%71 = negative(%70)                     # EncryptedTensor<int64, shape=(1, 1)>
%72 = add(%68, %71)                     # EncryptedTensor<int64, shape=(1, 2)>
%73 = subgraph(%72)                     # EncryptedTensor<int64, shape=(1, 2)>
return %73

Subgraphs:

    %67 = subgraph(%66):

         %0 = 0                               # ClearScalar<uint1>
         %1 = 7                               # ClearScalar<uint3>
         %2 = 0.43717812553146684             # ClearScalar<float64>
         %3 = 0                               # ClearScalar<uint1>
         %4 = 0.3122700896653335              # ClearScalar<float64>
         %5 = 6                               # ClearScalar<uint3>
         %6 = 0                               # ClearScalar<uint1>
         %7 = float_subgraph_input            # EncryptedTensor<int64, shape=(1, 3)>
         %8 = mul(%7, %2)                     # EncryptedTensor<float64, shape=(1, 3)>
         %9 = maximum(%0, %8)                 # EncryptedTensor<float64, shape=(1, 3)>
        %10 = minimum(%9, %5)                 # EncryptedTensor<float64, shape=(1, 3)>
        %11 = truediv(%10, %4)                # EncryptedTensor<float64, shape=(1, 3)>
        %12 = add(%11, %6)                    # EncryptedTensor<float64, shape=(1, 3)>
        %13 = rint(%12)                       # EncryptedTensor<float64, shape=(1, 3)>
        %14 = clip(%13, %3, %1)               # EncryptedTensor<float64, shape=(1, 3)>
        %15 = astype(%14, dtype=int64)        # EncryptedTensor<int64, shape=(1, 3)>
        return %15

    %73 = subgraph(%72):

         %0 = 2.0072866201924806               # ClearScalar<float64>
         %1 = [ 2.12050759 50.90961931]        # ClearTensor<float64, shape=(2,)>
         %2 = 63                               # ClearScalar<uint6>
         %3 = 0                                # ClearScalar<uint1>
         %4 = [[0 0]]                          # ClearTensor<uint1, shape=(1, 2)>
         %5 = 0                                # ClearScalar<uint1>
         %6 = float_subgraph_input             # EncryptedTensor<int64, shape=(1, 2)>
         %7 = astype(%6, dtype=float32)        # EncryptedTensor<float32, shape=(1, 2)>
         %8 = add(%7, %5)                      # EncryptedTensor<float32, shape=(1, 2)>
         %9 = add(%8, %4)                      # EncryptedTensor<float32, shape=(1, 2)>
        %10 = mul(%0, %9)                      # EncryptedTensor<float64, shape=(1, 2)>
        %11 = add(%1, %10)                     # EncryptedTensor<float64, shape=(1, 2)>
        %12 = rint(%11)                        # EncryptedTensor<float64, shape=(1, 2)>
        %13 = clip(%12, %3, %2)                # EncryptedTensor<float64, shape=(1, 2)>
        %14 = astype(%13, dtype=int64)         # EncryptedTensor<int64, shape=(1, 2)>
        return %14
 %0 = [[ 0  1] [-2 -1] [ 3 -4]]         # ClearTensor<int3, shape=(3, 2)>
 %1 = -1                                # ClearScalar<int2>
 %2 = 0                                 # ClearScalar<uint1>
 %3 = 7                                 # ClearScalar<uint3>
 %4 = [[1] [1] [1]]                     # ClearTensor<uint1, shape=(3, 1)>
 %5 = 0                                 # ClearScalar<uint1>
 %6 = 0.3122700896653335                # ClearScalar<float64>
 %7 = 6                                 # ClearScalar<uint3>
 %8 = 0                                 # ClearScalar<uint1>
 %9 = 0.43717812553146684               # ClearScalar<float64>
%10 = -2                                # ClearScalar<int2>
%11 = 0                                 # ClearScalar<uint1>
%12 = 7                                 # ClearScalar<uint3>
%13 = [2.3489919 ... .09395143]         # ClearTensor<float64, shape=(3,)>
%14 = 0.10764519433874437               # ClearScalar<float64>
%15 = [[0 0 0]]                         # ClearTensor<uint1, shape=(1, 3)>
%16 = 0                                 # ClearScalar<uint1>
%17 = [[ 1 -2  3 ...  3 -1  1]]         # ClearTensor<int3, shape=(3, 3)>
%18 = 0                                 # ClearScalar<uint1>
%19 = 0                                 # ClearScalar<uint1>
%20 = 7                                 # ClearScalar<uint3>
%21 = [[1] [1] [1]]                     # ClearTensor<uint1, shape=(3, 1)>
%22 = 0                                 # ClearScalar<uint1>
%23 = 0.21301029409681047               # ClearScalar<float64>
%24 = 6                                 # ClearScalar<uint3>
%25 = 0                                 # ClearScalar<uint1>
%26 = 0.21301029409681047               # ClearScalar<float64>
%27 = 0                                 # ClearScalar<uint1>
%28 = 0                                 # ClearScalar<uint1>
%29 = 7                                 # ClearScalar<uint3>
%30 = [ 1.929468 ... .32157814]         # ClearTensor<float64, shape=(3,)>
%31 = 0.10599581914480488               # ClearScalar<float64>
%32 = [[0 0 0]]                         # ClearTensor<uint1, shape=(1, 3)>
%33 = 0                                 # ClearScalar<uint1>
%34 = q_x                               # EncryptedTensor<uint3, shape=(1, 4)>
%35 = [[-4  3 -3 ...  2 -4  1]]         # ClearTensor<int3, shape=(4, 3)>
%36 = -3                                # ClearScalar<int3>
%37 = [[1] [1] [1] [1]]                 # ClearTensor<uint1, shape=(4, 1)>
%38 = matmul(%34, %35)                  # EncryptedTensor<int64, shape=(1, 3)>
%39 = matmul(%34, %37)                  # EncryptedTensor<uint32, shape=(1, 1)>
%40 = mul(%36, %39)                     # EncryptedTensor<int33, shape=(1, 1)>
%41 = negative(%40)                     # EncryptedTensor<int64, shape=(1, 1)>
%42 = add(%38, %41)                     # EncryptedTensor<int64, shape=(1, 3)>
%43 = astype(%42, dtype=float32)        # EncryptedTensor<float32, shape=(1, 3)>
%44 = add(%43, %33)                     # EncryptedTensor<float32, shape=(1, 3)>
%45 = add(%44, %32)                     # EncryptedTensor<float32, shape=(1, 3)>
%46 = mul(%31, %45)                     # EncryptedTensor<float64, shape=(1, 3)>
%47 = add(%30, %46)                     # EncryptedTensor<float64, shape=(1, 3)>
%48 = rint(%47)                         # EncryptedTensor<float64, shape=(1, 3)>
%49 = clip(%48, %28, %29)               # EncryptedTensor<float64, shape=(1, 3)>
%50 = astype(%49, dtype=int64)          # EncryptedTensor<int64, shape=(1, 3)>
%51 = add(%50, %27)                     # EncryptedTensor<int64, shape=(1, 3)>
%52 = mul(%51, %26)                     # EncryptedTensor<float64, shape=(1, 3)>
%53 = maximum(%25, %52)                 # EncryptedTensor<float64, shape=(1, 3)>
%54 = minimum(%53, %24)                 # EncryptedTensor<float64, shape=(1, 3)>
%55 = truediv(%54, %23)                 # EncryptedTensor<float64, shape=(1, 3)>
%56 = add(%55, %22)                     # EncryptedTensor<float64, shape=(1, 3)>
%57 = rint(%56)                         # EncryptedTensor<float64, shape=(1, 3)>
%58 = clip(%57, %19, %20)               # EncryptedTensor<float64, shape=(1, 3)>
%59 = astype(%58, dtype=int64)          # EncryptedTensor<int64, shape=(1, 3)>
%60 = matmul(%59, %17)                  # EncryptedTensor<int64, shape=(1, 3)>
%61 = matmul(%59, %21)                  # EncryptedTensor<int64, shape=(1, 1)>
%62 = mul(%18, %61)                     # EncryptedTensor<int64, shape=(1, 1)>
%63 = negative(%62)                     # EncryptedTensor<int64, shape=(1, 1)>
%64 = add(%60, %63)                     # EncryptedTensor<int64, shape=(1, 3)>
%65 = astype(%64, dtype=float32)        # EncryptedTensor<float32, shape=(1, 3)>
%66 = add(%65, %16)                     # EncryptedTensor<float32, shape=(1, 3)>
%67 = add(%66, %15)                     # EncryptedTensor<float32, shape=(1, 3)>
%68 = mul(%14, %67)                     # EncryptedTensor<float64, shape=(1, 3)>
%69 = add(%13, %68)                     # EncryptedTensor<float64, shape=(1, 3)>
%70 = rint(%69)                         # EncryptedTensor<float64, shape=(1, 3)>
%71 = clip(%70, %11, %12)               # EncryptedTensor<float64, shape=(1, 3)>
%72 = astype(%71, dtype=int64)          # EncryptedTensor<int64, shape=(1, 3)>
%73 = add(%72, %10)                     # EncryptedTensor<int64, shape=(1, 3)>
%74 = mul(%73, %9)                      # EncryptedTensor<float64, shape=(1, 3)>
%75 = maximum(%8, %74)                  # EncryptedTensor<float64, shape=(1, 3)>
%76 = minimum(%75, %7)                  # EncryptedTensor<float64, shape=(1, 3)>
%77 = truediv(%76, %6)                  # EncryptedTensor<float64, shape=(1, 3)>
%78 = add(%77, %5)                      # EncryptedTensor<float64, shape=(1, 3)>
%79 = rint(%78)                         # EncryptedTensor<float64, shape=(1, 3)>
%80 = clip(%79, %2, %3)                 # EncryptedTensor<float64, shape=(1, 3)>
%81 = astype(%80, dtype=int64)          # EncryptedTensor<int64, shape=(1, 3)>
%82 = matmul(%81, %0)                   # EncryptedTensor<int64, shape=(1, 2)>
%83 = matmul(%81, %4)                   # EncryptedTensor<int64, shape=(1, 1)>
%84 = mul(%1, %83)                      # EncryptedTensor<int64, shape=(1, 1)>
%85 = negative(%84)                     # EncryptedTensor<int64, shape=(1, 1)>
%86 = add(%82, %85)                     # EncryptedTensor<int64, shape=(1, 2)>
%87 = subgraph(%86)                     # EncryptedTensor<int64, shape=(1, 2)>
return %87

Subgraphs:

    %87 = subgraph(%86):

         %0 = 2.0072866201924806               # ClearScalar<float64>
         %1 = [ 2.12050759 50.90961931]        # ClearTensor<float64, shape=(2,)>
         %2 = 63                               # ClearScalar<uint6>
         %3 = 0                                # ClearScalar<uint1>
         %4 = [[0 0]]                          # ClearTensor<uint1, shape=(1, 2)>
         %5 = 0                                # ClearScalar<uint1>
         %6 = float_subgraph_input             # EncryptedTensor<int64, shape=(1, 2)>
         %7 = astype(%6, dtype=float32)        # EncryptedTensor<float32, shape=(1, 2)>
         %8 = add(%7, %5)                      # EncryptedTensor<float32, shape=(1, 2)>
         %9 = add(%8, %4)                      # EncryptedTensor<float32, shape=(1, 2)>
        %10 = mul(%0, %9)                      # EncryptedTensor<float64, shape=(1, 2)>
        %11 = add(%1, %10)                     # EncryptedTensor<float64, shape=(1, 2)>
        %12 = rint(%11)                        # EncryptedTensor<float64, shape=(1, 2)>
        %13 = clip(%12, %3, %2)                # EncryptedTensor<float64, shape=(1, 2)>
        %14 = astype(%13, dtype=int64)         # EncryptedTensor<int64, shape=(1, 2)>
        return %14
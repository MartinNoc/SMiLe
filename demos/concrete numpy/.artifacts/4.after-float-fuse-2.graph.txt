 %0 = [[ 0  1] [-2 -1] [ 3 -4]]         # ClearTensor<int3, shape=(3, 2)>
 %1 = -1                                # ClearScalar<int2>
 %2 = [[1] [1] [1]]                     # ClearTensor<uint1, shape=(3, 1)>
 %3 = -2                                # ClearScalar<int2>
 %4 = [[ 1 -2  3 ...  3 -1  1]]         # ClearTensor<int3, shape=(3, 3)>
 %5 = 0                                 # ClearScalar<uint1>
 %6 = 0                                 # ClearScalar<uint1>
 %7 = 7                                 # ClearScalar<uint3>
 %8 = [[1] [1] [1]]                     # ClearTensor<uint1, shape=(3, 1)>
 %9 = 0                                 # ClearScalar<uint1>
%10 = 0.21301029409681047               # ClearScalar<float64>
%11 = 6                                 # ClearScalar<uint3>
%12 = 0                                 # ClearScalar<uint1>
%13 = 0.21301029409681047               # ClearScalar<float64>
%14 = 0                                 # ClearScalar<uint1>
%15 = 0                                 # ClearScalar<uint1>
%16 = 7                                 # ClearScalar<uint3>
%17 = [ 1.929468 ... .32157814]         # ClearTensor<float64, shape=(3,)>
%18 = 0.10599581914480488               # ClearScalar<float64>
%19 = [[0 0 0]]                         # ClearTensor<uint1, shape=(1, 3)>
%20 = 0                                 # ClearScalar<uint1>
%21 = q_x                               # EncryptedTensor<uint3, shape=(1, 4)>
%22 = [[-4  3 -3 ...  2 -4  1]]         # ClearTensor<int3, shape=(4, 3)>
%23 = -3                                # ClearScalar<int3>
%24 = [[1] [1] [1] [1]]                 # ClearTensor<uint1, shape=(4, 1)>
%25 = matmul(%21, %22)                  # EncryptedTensor<int64, shape=(1, 3)>
%26 = matmul(%21, %24)                  # EncryptedTensor<uint32, shape=(1, 1)>
%27 = mul(%23, %26)                     # EncryptedTensor<int33, shape=(1, 1)>
%28 = negative(%27)                     # EncryptedTensor<int64, shape=(1, 1)>
%29 = add(%25, %28)                     # EncryptedTensor<int64, shape=(1, 3)>
%30 = astype(%29, dtype=float32)        # EncryptedTensor<float32, shape=(1, 3)>
%31 = add(%30, %20)                     # EncryptedTensor<float32, shape=(1, 3)>
%32 = add(%31, %19)                     # EncryptedTensor<float32, shape=(1, 3)>
%33 = mul(%18, %32)                     # EncryptedTensor<float64, shape=(1, 3)>
%34 = add(%17, %33)                     # EncryptedTensor<float64, shape=(1, 3)>
%35 = rint(%34)                         # EncryptedTensor<float64, shape=(1, 3)>
%36 = clip(%35, %15, %16)               # EncryptedTensor<float64, shape=(1, 3)>
%37 = astype(%36, dtype=int64)          # EncryptedTensor<int64, shape=(1, 3)>
%38 = add(%37, %14)                     # EncryptedTensor<int64, shape=(1, 3)>
%39 = mul(%38, %13)                     # EncryptedTensor<float64, shape=(1, 3)>
%40 = maximum(%12, %39)                 # EncryptedTensor<float64, shape=(1, 3)>
%41 = minimum(%40, %11)                 # EncryptedTensor<float64, shape=(1, 3)>
%42 = truediv(%41, %10)                 # EncryptedTensor<float64, shape=(1, 3)>
%43 = add(%42, %9)                      # EncryptedTensor<float64, shape=(1, 3)>
%44 = rint(%43)                         # EncryptedTensor<float64, shape=(1, 3)>
%45 = clip(%44, %6, %7)                 # EncryptedTensor<float64, shape=(1, 3)>
%46 = astype(%45, dtype=int64)          # EncryptedTensor<int64, shape=(1, 3)>
%47 = matmul(%46, %4)                   # EncryptedTensor<int64, shape=(1, 3)>
%48 = matmul(%46, %8)                   # EncryptedTensor<int64, shape=(1, 1)>
%49 = mul(%5, %48)                      # EncryptedTensor<int64, shape=(1, 1)>
%50 = negative(%49)                     # EncryptedTensor<int64, shape=(1, 1)>
%51 = add(%47, %50)                     # EncryptedTensor<int64, shape=(1, 3)>
%52 = subgraph(%51)                     # EncryptedTensor<int64, shape=(1, 3)>
%53 = add(%52, %3)                      # EncryptedTensor<int64, shape=(1, 3)>
%54 = subgraph(%53)                     # EncryptedTensor<int64, shape=(1, 3)>
%55 = matmul(%54, %0)                   # EncryptedTensor<int64, shape=(1, 2)>
%56 = matmul(%54, %2)                   # EncryptedTensor<int64, shape=(1, 1)>
%57 = mul(%1, %56)                      # EncryptedTensor<int64, shape=(1, 1)>
%58 = negative(%57)                     # EncryptedTensor<int64, shape=(1, 1)>
%59 = add(%55, %58)                     # EncryptedTensor<int64, shape=(1, 2)>
%60 = subgraph(%59)                     # EncryptedTensor<int64, shape=(1, 2)>
return %60

Subgraphs:

    %52 = subgraph(%51):

         %0 = [2.3489919 ... .09395143]        # ClearTensor<float64, shape=(3,)>
         %1 = 0.10764519433874437              # ClearScalar<float64>
         %2 = 7                                # ClearScalar<uint3>
         %3 = 0                                # ClearScalar<uint1>
         %4 = [[0 0 0]]                        # ClearTensor<uint1, shape=(1, 3)>
         %5 = 0                                # ClearScalar<uint1>
         %6 = float_subgraph_input             # EncryptedTensor<int64, shape=(1, 3)>
         %7 = astype(%6, dtype=float32)        # EncryptedTensor<float32, shape=(1, 3)>
         %8 = add(%7, %5)                      # EncryptedTensor<float32, shape=(1, 3)>
         %9 = add(%8, %4)                      # EncryptedTensor<float32, shape=(1, 3)>
        %10 = mul(%1, %9)                      # EncryptedTensor<float64, shape=(1, 3)>
        %11 = add(%0, %10)                     # EncryptedTensor<float64, shape=(1, 3)>
        %12 = rint(%11)                        # EncryptedTensor<float64, shape=(1, 3)>
        %13 = clip(%12, %3, %2)                # EncryptedTensor<float64, shape=(1, 3)>
        %14 = astype(%13, dtype=int64)         # EncryptedTensor<int64, shape=(1, 3)>
        return %14

    %54 = subgraph(%53):

         %0 = 0                               # ClearScalar<uint1>
         %1 = 7                               # ClearScalar<uint3>
         %2 = 0.43717812553146684             # ClearScalar<float64>
         %3 = 0                               # ClearScalar<uint1>
         %4 = 0.3122700896653335              # ClearScalar<float64>
         %5 = 6                               # ClearScalar<uint3>
         %6 = 0                               # ClearScalar<uint1>
         %7 = float_subgraph_input            # EncryptedTensor<int64, shape=(1, 3)>
         %8 = mul(%7, %2)                     # EncryptedTensor<float64, shape=(1, 3)>
         %9 = maximum(%0, %8)                 # EncryptedTensor<float64, shape=(1, 3)>
        %10 = minimum(%9, %5)                 # EncryptedTensor<float64, shape=(1, 3)>
        %11 = truediv(%10, %4)                # EncryptedTensor<float64, shape=(1, 3)>
        %12 = add(%11, %6)                    # EncryptedTensor<float64, shape=(1, 3)>
        %13 = rint(%12)                       # EncryptedTensor<float64, shape=(1, 3)>
        %14 = clip(%13, %3, %1)               # EncryptedTensor<float64, shape=(1, 3)>
        %15 = astype(%14, dtype=int64)        # EncryptedTensor<int64, shape=(1, 3)>
        return %15

    %60 = subgraph(%59):

         %0 = 2.0072866201924806               # ClearScalar<float64>
         %1 = [ 2.12050759 50.90961931]        # ClearTensor<float64, shape=(2,)>
         %2 = 63                               # ClearScalar<uint6>
         %3 = 0                                # ClearScalar<uint1>
         %4 = [[0 0]]                          # ClearTensor<uint1, shape=(1, 2)>
         %5 = 0                                # ClearScalar<uint1>
         %6 = float_subgraph_input             # EncryptedTensor<int64, shape=(1, 2)>
         %7 = astype(%6, dtype=float32)        # EncryptedTensor<float32, shape=(1, 2)>
         %8 = add(%7, %5)                      # EncryptedTensor<float32, shape=(1, 2)>
         %9 = add(%8, %4)                      # EncryptedTensor<float32, shape=(1, 2)>
        %10 = mul(%0, %9)                      # EncryptedTensor<float64, shape=(1, 2)>
        %11 = add(%1, %10)                     # EncryptedTensor<float64, shape=(1, 2)>
        %12 = rint(%11)                        # EncryptedTensor<float64, shape=(1, 2)>
        %13 = clip(%12, %3, %2)                # EncryptedTensor<float64, shape=(1, 2)>
        %14 = astype(%13, dtype=int64)         # EncryptedTensor<int64, shape=(1, 2)>
        return %14
 %0 = [[ 0  1] [-2 -1] [ 3 -4]]        # ClearTensor<int3, shape=(3, 2)>
 %1 = -1                               # ClearScalar<int2>
 %2 = [[1] [1] [1]]                    # ClearTensor<uint1, shape=(3, 1)>
 %3 = -2                               # ClearScalar<int2>
 %4 = [[ 1 -2  3 ...  3 -1  1]]        # ClearTensor<int3, shape=(3, 3)>
 %5 = 0                                # ClearScalar<uint1>
 %6 = [[1] [1] [1]]                    # ClearTensor<uint1, shape=(3, 1)>
 %7 = 0                                # ClearScalar<uint1>
 %8 = q_x                              # EncryptedTensor<uint3, shape=(1, 4)>
 %9 = [[-4  3 -3 ...  2 -4  1]]        # ClearTensor<int3, shape=(4, 3)>
%10 = -3                               # ClearScalar<int3>
%11 = [[1] [1] [1] [1]]                # ClearTensor<uint1, shape=(4, 1)>
%12 = matmul(%8, %9)                   # EncryptedTensor<int64, shape=(1, 3)>
%13 = matmul(%8, %11)                  # EncryptedTensor<uint32, shape=(1, 1)>
%14 = mul(%10, %13)                    # EncryptedTensor<int33, shape=(1, 1)>
%15 = negative(%14)                    # EncryptedTensor<int64, shape=(1, 1)>
%16 = add(%12, %15)                    # EncryptedTensor<int64, shape=(1, 3)>
%17 = subgraph(%16)                    # EncryptedTensor<int64, shape=(1, 3)>
%18 = add(%17, %7)                     # EncryptedTensor<int64, shape=(1, 3)>
%19 = subgraph(%18)                    # EncryptedTensor<int64, shape=(1, 3)>
%20 = matmul(%19, %4)                  # EncryptedTensor<int64, shape=(1, 3)>
%21 = matmul(%19, %6)                  # EncryptedTensor<int64, shape=(1, 1)>
%22 = mul(%5, %21)                     # EncryptedTensor<int64, shape=(1, 1)>
%23 = negative(%22)                    # EncryptedTensor<int64, shape=(1, 1)>
%24 = add(%20, %23)                    # EncryptedTensor<int64, shape=(1, 3)>
%25 = subgraph(%24)                    # EncryptedTensor<int64, shape=(1, 3)>
%26 = add(%25, %3)                     # EncryptedTensor<int64, shape=(1, 3)>
%27 = subgraph(%26)                    # EncryptedTensor<int64, shape=(1, 3)>
%28 = matmul(%27, %0)                  # EncryptedTensor<int64, shape=(1, 2)>
%29 = matmul(%27, %2)                  # EncryptedTensor<int64, shape=(1, 1)>
%30 = mul(%1, %29)                     # EncryptedTensor<int64, shape=(1, 1)>
%31 = negative(%30)                    # EncryptedTensor<int64, shape=(1, 1)>
%32 = add(%28, %31)                    # EncryptedTensor<int64, shape=(1, 2)>
%33 = subgraph(%32)                    # EncryptedTensor<int64, shape=(1, 2)>
return %33

Subgraphs:

    %17 = subgraph(%16):

         %0 = 0                                # ClearScalar<uint1>
         %1 = 0                                # ClearScalar<uint1>
         %2 = 7                                # ClearScalar<uint3>
         %3 = 0.10599581914480488              # ClearScalar<float64>
         %4 = [[0 0 0]]                        # ClearTensor<uint1, shape=(1, 3)>
         %5 = [ 1.929468 ... .32157814]        # ClearTensor<float64, shape=(3,)>
         %6 = float_subgraph_input             # EncryptedTensor<int64, shape=(1, 3)>
         %7 = astype(%6, dtype=float32)        # EncryptedTensor<float32, shape=(1, 3)>
         %8 = add(%7, %0)                      # EncryptedTensor<float32, shape=(1, 3)>
         %9 = add(%8, %4)                      # EncryptedTensor<float32, shape=(1, 3)>
        %10 = mul(%3, %9)                      # EncryptedTensor<float64, shape=(1, 3)>
        %11 = add(%5, %10)                     # EncryptedTensor<float64, shape=(1, 3)>
        %12 = rint(%11)                        # EncryptedTensor<float64, shape=(1, 3)>
        %13 = clip(%12, %1, %2)                # EncryptedTensor<float64, shape=(1, 3)>
        %14 = astype(%13, dtype=int64)         # EncryptedTensor<int64, shape=(1, 3)>
        return %14

    %19 = subgraph(%18):

         %0 = 0                               # ClearScalar<uint1>
         %1 = 0.21301029409681047             # ClearScalar<float64>
         %2 = 7                               # ClearScalar<uint3>
         %3 = 6                               # ClearScalar<uint3>
         %4 = 0                               # ClearScalar<uint1>
         %5 = 0                               # ClearScalar<uint1>
         %6 = 0.21301029409681047             # ClearScalar<float64>
         %7 = float_subgraph_input            # EncryptedTensor<int64, shape=(1, 3)>
         %8 = mul(%7, %1)                     # EncryptedTensor<float64, shape=(1, 3)>
         %9 = maximum(%5, %8)                 # EncryptedTensor<float64, shape=(1, 3)>
        %10 = minimum(%9, %3)                 # EncryptedTensor<float64, shape=(1, 3)>
        %11 = truediv(%10, %6)                # EncryptedTensor<float64, shape=(1, 3)>
        %12 = add(%11, %4)                    # EncryptedTensor<float64, shape=(1, 3)>
        %13 = rint(%12)                       # EncryptedTensor<float64, shape=(1, 3)>
        %14 = clip(%13, %0, %2)               # EncryptedTensor<float64, shape=(1, 3)>
        %15 = astype(%14, dtype=int64)        # EncryptedTensor<int64, shape=(1, 3)>
        return %15

    %25 = subgraph(%24):

         %0 = [2.3489919 ... .09395143]        # ClearTensor<float64, shape=(3,)>
         %1 = 0.10764519433874437              # ClearScalar<float64>
         %2 = 7                                # ClearScalar<uint3>
         %3 = 0                                # ClearScalar<uint1>
         %4 = [[0 0 0]]                        # ClearTensor<uint1, shape=(1, 3)>
         %5 = 0                                # ClearScalar<uint1>
         %6 = float_subgraph_input             # EncryptedTensor<int64, shape=(1, 3)>
         %7 = astype(%6, dtype=float32)        # EncryptedTensor<float32, shape=(1, 3)>
         %8 = add(%7, %5)                      # EncryptedTensor<float32, shape=(1, 3)>
         %9 = add(%8, %4)                      # EncryptedTensor<float32, shape=(1, 3)>
        %10 = mul(%1, %9)                      # EncryptedTensor<float64, shape=(1, 3)>
        %11 = add(%0, %10)                     # EncryptedTensor<float64, shape=(1, 3)>
        %12 = rint(%11)                        # EncryptedTensor<float64, shape=(1, 3)>
        %13 = clip(%12, %3, %2)                # EncryptedTensor<float64, shape=(1, 3)>
        %14 = astype(%13, dtype=int64)         # EncryptedTensor<int64, shape=(1, 3)>
        return %14

    %27 = subgraph(%26):

         %0 = 0                               # ClearScalar<uint1>
         %1 = 7                               # ClearScalar<uint3>
         %2 = 0.43717812553146684             # ClearScalar<float64>
         %3 = 0                               # ClearScalar<uint1>
         %4 = 0.3122700896653335              # ClearScalar<float64>
         %5 = 6                               # ClearScalar<uint3>
         %6 = 0                               # ClearScalar<uint1>
         %7 = float_subgraph_input            # EncryptedTensor<int64, shape=(1, 3)>
         %8 = mul(%7, %2)                     # EncryptedTensor<float64, shape=(1, 3)>
         %9 = maximum(%0, %8)                 # EncryptedTensor<float64, shape=(1, 3)>
        %10 = minimum(%9, %5)                 # EncryptedTensor<float64, shape=(1, 3)>
        %11 = truediv(%10, %4)                # EncryptedTensor<float64, shape=(1, 3)>
        %12 = add(%11, %6)                    # EncryptedTensor<float64, shape=(1, 3)>
        %13 = rint(%12)                       # EncryptedTensor<float64, shape=(1, 3)>
        %14 = clip(%13, %3, %1)               # EncryptedTensor<float64, shape=(1, 3)>
        %15 = astype(%14, dtype=int64)        # EncryptedTensor<int64, shape=(1, 3)>
        return %15

    %33 = subgraph(%32):

         %0 = 2.0072866201924806               # ClearScalar<float64>
         %1 = [ 2.12050759 50.90961931]        # ClearTensor<float64, shape=(2,)>
         %2 = 63                               # ClearScalar<uint6>
         %3 = 0                                # ClearScalar<uint1>
         %4 = [[0 0]]                          # ClearTensor<uint1, shape=(1, 2)>
         %5 = 0                                # ClearScalar<uint1>
         %6 = float_subgraph_input             # EncryptedTensor<int64, shape=(1, 2)>
         %7 = astype(%6, dtype=float32)        # EncryptedTensor<float32, shape=(1, 2)>
         %8 = add(%7, %5)                      # EncryptedTensor<float32, shape=(1, 2)>
         %9 = add(%8, %4)                      # EncryptedTensor<float32, shape=(1, 2)>
        %10 = mul(%0, %9)                      # EncryptedTensor<float64, shape=(1, 2)>
        %11 = add(%1, %10)                     # EncryptedTensor<float64, shape=(1, 2)>
        %12 = rint(%11)                        # EncryptedTensor<float64, shape=(1, 2)>
        %13 = clip(%12, %3, %2)                # EncryptedTensor<float64, shape=(1, 2)>
        %14 = astype(%13, dtype=int64)         # EncryptedTensor<int64, shape=(1, 2)>
        return %14